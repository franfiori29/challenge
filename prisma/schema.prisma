// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Side {
  BUY
  SELL
}

model PriceEstimation {
  id         String   @id @default(uuid())
  pairId     String
  side       Side
  subtotal   Float
  fee        Float
  volume     Float
  spread     Float
  price      Float
  expiration DateTime
  userId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  swap Swap?
  user User  @relation(fields: [userId], references: [id])
  pair Pair  @relation(fields: [pairId], references: [id])
}

model Swap {
  id                String @id @default(uuid())
  subtotal          Float
  fee               Float
  spread            Float
  total             Float
  orderId           String
  priceEstimationId String @unique
  userId            String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  priceEstimation PriceEstimation @relation(fields: [priceEstimationId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
}

model User {
  id       String @id @default(uuid())
  username String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  priceEstimations PriceEstimation[]
  swaps            Swap[]
  balances         Balance[]
}

model Balance {
  id      String @id @default(uuid())
  userId  String
  tokenId String
  amount  Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  token Token @relation(fields: [tokenId], references: [id])

  @@unique([userId, tokenId])
}

model Token {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  balances   Balance[]
  pairsBase  Pair[]    @relation("baseToken")
  pairsQuote Pair[]    @relation("quoteToken")
}

model Pair {
  id                 String  @id @default(uuid())
  baseTokenId        String
  quoteTokenId       String
  symbol             String  @unique
  feePercentage      Float
  spreadPercentage   Float
  notional           Float
  binanceProxySymbol String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  baseToken        Token             @relation("baseToken", fields: [baseTokenId], references: [id])
  quoteToken       Token             @relation("quoteToken", fields: [quoteTokenId], references: [id])
  priceEstimations PriceEstimation[]

  @@unique([baseTokenId, quoteTokenId])
}
